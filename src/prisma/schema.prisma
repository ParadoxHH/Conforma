// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(cuid())
  email           String          @unique
  password        String
  role            Role            @default(HOMEOWNER)
  avatarUrl       String?
  bio             String?
  contractor      Contractor?
  homeowner       Homeowner?
  notifications   Notification[]
  auditLogs       AuditLog[]
  uploadedFiles   EvidenceFile[]
  documents       Document[]
  messages        Message[]       @relation("MessageSender")
  referralCode    String?         @unique
  referredByCode  String?
  referralsCreated ReferralEvent[] @relation("ReferrerEvents")
  referralsReceived ReferralEvent[] @relation("ReferredEvents")
  analyticsSnapshots AnalyticsSnapshot[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Contractor {
  id              String   @id @default(cuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @unique
  companyName     String?
  trade           String?
  payoutAccount   String?
  serviceAreas    String[] @default([])
  trades          Trade[]  @default([])
  portfolio       Json?
  verifiedKyc     Boolean  @default(false)
  verifiedLicense Boolean  @default(false)
  verifiedInsurance Boolean @default(false)
  ratingAvg       Decimal  @default(0) @db.Decimal(4, 2)
  ratingCount     Int      @default(0)
  jobs            Job[]
  reviews         Review[]
  subscriptionTier   SubscriptionTier   @default(FREE)
  subscriptionStatus SubscriptionStatus @default(ACTIVE)
  instantPayoutEnabled Boolean          @default(false)
  stripeCustomerId    String?           @unique
  stripeSubscriptionId String?
  subscriptionRenewalAt DateTime?
  payouts         Payout[]

  @@index([verifiedKyc, verifiedLicense, verifiedInsurance, ratingAvg], map: "contractor_verification_rating_idx")
  @@index([subscriptionTier, subscriptionStatus], map: "contractor_subscription_idx")
}

model Homeowner {
  id              String   @id @default(cuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @unique
  address         String
  city            String
  state           String   @default("TX")
  zip             String
  phoneNumber     String?
  displayName     String?
  allowAlias      Boolean  @default(true)
  jobs            Job[]
  reviews         Review[]
}

model Job {
  id                  String      @id @default(cuid())
  homeowner           Homeowner   @relation(fields: [homeownerId], references: [id])
  homeownerId         String
  contractor          Contractor  @relation(fields: [contractorId], references: [id])
  contractorId        String
  title               String
  description         String
  totalPrice          Float
  status              JobStatus   @default(PENDING)
  escrowTransactionId String?
  platformFeeBps      Int         @default(150)
  feeAmounts          Json?
  stateCode           String      @default("TX") @db.Char(2)
  milestones          Milestone[]
  messages            Message[]
  invites             Invite[]
  reviews             Review[]
  payouts             Payout[]
  riskEvents         RiskEvent[]
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}

model Milestone {
  id               String          @id @default(cuid())
  job              Job             @relation(fields: [jobId], references: [id])
  jobId            String
  title            String
  price            Float
  status           MilestoneStatus @default(PENDING)
  submittedAt      DateTime?
  approvedAt       DateTime?
  reviewDeadlineAt DateTime?
  evidence         EvidenceFile[]
  dispute          Dispute?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model EvidenceFile {
  id           String    @id @default(cuid())
  milestone    Milestone @relation(fields: [milestoneId], references: [id])
  milestoneId  String
  uploader     User      @relation(fields: [uploaderUserId], references: [id])
  uploaderUserId String
  url          String
  type         String
  contentHash  String?   @unique
  createdAt    DateTime  @default(now())
}

model Dispute {
  id              String   @id @default(cuid())
  milestone       Milestone @relation(fields: [milestoneId], references: [id])
  milestoneId     String   @unique
  reasonText      String
  status          String
  resolutionNotes String?
  aiSummary       AiDisputeSummary?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String
  payload   Json
  sentAt    DateTime @default(now())
  readAt    DateTime?
}

model AuditLog {
  id         String   @id @default(cuid())
  actor      User     @relation(fields: [actorUserId], references: [id])
  actorUserId String
  entity     String
  entityId   String
  action     String
  metadata   Json
  createdAt  DateTime @default(now())
}

model WebhookEvent {
  id         String   @id @default(cuid())
  source     String
  payload    Json
  processed  Boolean  @default(false)
  createdAt  DateTime @default(now())
}

model Review {
  id            String     @id @default(cuid())
  job           Job        @relation(fields: [jobId], references: [id])
  jobId         String
  contractor    Contractor @relation(fields: [contractorId], references: [id])
  contractorId  String
  homeowner     Homeowner  @relation(fields: [homeownerId], references: [id])
  homeownerId   String
  rating        Int
  comment       String?
  createdAt     DateTime   @default(now())

  @@unique([jobId, homeownerId])
  @@index([contractorId, createdAt], map: "review_contractor_created_idx")
}

model Message {
  id             String   @id @default(cuid())
  job            Job      @relation(fields: [jobId], references: [id])
  jobId          String
  sender         User     @relation("MessageSender", fields: [senderUserId], references: [id])
  senderUserId   String
  body           String
  attachments    Json?
  readByUserIds  String[] @default([])
  createdAt      DateTime @default(now())

  @@index([jobId, createdAt], map: "message_job_created_idx")
}

model Invite {
  id         String        @id @default(cuid())
  job        Job?          @relation(fields: [jobId], references: [id])
  jobId      String?
  role       InviteRole
  email      String
  phone      String?
  token      String        @unique
  status     InviteStatus  @default(PENDING)
  createdAt  DateTime      @default(now())
  expiresAt  DateTime

  @@index([email, status], map: "invite_email_status_idx")
  @@index([token], map: "invite_token_idx")
}

model Document {
  id            String            @id @default(cuid())
  user          User              @relation(fields: [userId], references: [id])
  userId        String
  type          DocumentType
  url           String
  status        DocumentStatus    @default(PENDING)
  aiStatus      DocumentAiStatus  @default(NONE)
  aiConfidence  Decimal           @default(0) @db.Decimal(5, 4)
  aiReason      String?
  issuer        String?
  policyNumber  String?
  effectiveFrom DateTime?         @db.Timestamptz(6)
  effectiveTo   DateTime?         @db.Timestamptz(6)
  notes         String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@index([status], map: "document_status_idx")
  @@index([aiStatus], map: "document_ai_status_idx")
  @@index([userId, type], map: "document_user_type_idx")
}

model RiskEvent {
  id        String   @id @default(cuid())
  job       Job      @relation(fields: [jobId], references: [id])
  jobId     String
  score     Int
  reasons   String[]
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  @@index([jobId, createdAt], map: "risk_event_job_created_idx")
}

model RiskConfig {
  id                  Int    @id
  allowThreshold      Int    @default(25)
  blockThreshold      Int    @default(50)
  maxJobAmountByTrade Json?
  updatedAt           DateTime @updatedAt @db.Timestamptz(6)
  createdAt           DateTime @default(now()) @db.Timestamptz(6)
}

model Payout {
  id             String         @id @default(cuid())
  job            Job            @relation(fields: [jobId], references: [id])
  jobId          String
  contractor     Contractor     @relation(fields: [contractorId], references: [id])
  contractorId   String
  amount         Int
  type           PayoutType
  status         PayoutStatus   @default(PENDING)
  processorRef   String?        @unique
  metadata       Json?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@index([jobId, status], map: "payout_job_status_idx")
  @@index([contractorId, status], map: "payout_contractor_status_idx")
}

model AiDisputeSummary {
  id          String              @id @default(cuid())
  dispute     Dispute             @relation(fields: [disputeId], references: [id])
  disputeId   String              @unique
  summary     String
  suggestion  AiDisputeSuggestion
  confidence  Decimal?            @db.Decimal(5, 4)
  modelInfo   Json?
  createdAt   DateTime            @default(now())
}

model AnalyticsSnapshot {
  id          String                  @id @default(cuid())
  kind        AnalyticsSnapshotKind
  user        User?                   @relation(fields: [userId], references: [id])
  userId      String?
  periodStart DateTime
  periodEnd   DateTime
  payload     Json
  createdAt   DateTime                @default(now())

  @@index([kind, userId, periodStart], map: "analytics_kind_user_period_idx")
}

model ReferralEvent {
  id               String             @id @default(cuid())
  referrerUser     User               @relation("ReferrerEvents", fields: [referrerUserId], references: [id])
  referrerUserId   String
  referredUser     User?              @relation("ReferredEvents", fields: [referredUserId], references: [id])
  referredUserId   String?
  event            ReferralEventType
  createdAt        DateTime           @default(now())

  @@index([referrerUserId, event], map: "referral_referrer_event_idx")
}

enum Role {
  ADMIN
  CONTRACTOR
  HOMEOWNER
}

enum JobStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  DISPUTED
  FUNDING_REQUIRED
}

enum MilestoneStatus {
  PENDING
  FUNDED
  RELEASED
  REFUNDED
  DISPUTED
}

enum Trade {
  ROOFING
  MOVING
  SOLAR
  TREE_TRIMMING
  HOME_IMPROVEMENT
  OTHER
}

enum InviteRole {
  CONTRACTOR
  HOMEOWNER
}

enum InviteStatus {
  PENDING
  ACCEPTED
  EXPIRED
}

enum DocumentType {
  LICENSE
  INSURANCE
  CERT
  OTHER
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
  NEEDS_REVIEW
  EXPIRED
}

enum DocumentAiStatus {
  NONE
  APPROVED
  REJECTED
  NEEDS_REVIEW
}

enum SubscriptionTier {
  FREE
  PRO
  VERIFIED
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
}

enum PayoutType {
  STANDARD
  INSTANT
}

enum PayoutStatus {
  PENDING
  SENT
  SETTLED
  FAILED
}

enum AiDisputeSuggestion {
  PARTIAL_RELEASE
  PARTIAL_REFUND
  RESUBMIT
  UNSURE
}

enum AnalyticsSnapshotKind {
  CONTRACTOR
  HOMEOWNER
  ADMIN
}

enum ReferralEventType {
  SIGNED_UP
  FIRST_FUNDED_JOB
  CREDIT_REDEEMED
}
