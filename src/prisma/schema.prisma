// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(cuid())
  email           String          @unique
  password        String
  role            Role            @default(HOMEOWNER)
  avatarUrl       String?
  bio             String?
  contractor      Contractor?
  homeowner       Homeowner?
  notifications   Notification[]
  auditLogs       AuditLog[]
  uploadedFiles   EvidenceFile[]
  documents       Document[]
  messages        Message[]       @relation("MessageSender")
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Contractor {
  id              String   @id @default(cuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @unique
  companyName     String?
  trade           String?
  payoutAccount   String?
  serviceAreas    String[] @default([])
  trades          Trade[]  @default([])
  portfolio       Json?
  verifiedKyc     Boolean  @default(false)
  verifiedLicense Boolean  @default(false)
  verifiedInsurance Boolean @default(false)
  ratingAvg       Decimal  @default(0) @db.Decimal(4, 2)
  ratingCount     Int      @default(0)
  jobs            Job[]
  reviews         Review[]

  @@index([verifiedKyc, verifiedLicense, verifiedInsurance, ratingAvg], map: "contractor_verification_rating_idx")
}

model Homeowner {
  id              String   @id @default(cuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @unique
  address         String
  city            String
  state           String   @default("TX")
  zip             String
  phoneNumber     String?
  displayName     String?
  allowAlias      Boolean  @default(true)
  jobs            Job[]
  reviews         Review[]
}

model Job {
  id                  String      @id @default(cuid())
  homeowner           Homeowner   @relation(fields: [homeownerId], references: [id])
  homeownerId         String
  contractor          Contractor  @relation(fields: [contractorId], references: [id])
  contractorId        String
  title               String
  description         String
  totalPrice          Float
  status              JobStatus   @default(PENDING)
  escrowTransactionId String?
  milestones          Milestone[]
  messages            Message[]
  invites             Invite[]
  reviews             Review[]
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}

model Milestone {
  id               String          @id @default(cuid())
  job              Job             @relation(fields: [jobId], references: [id])
  jobId            String
  title            String
  price            Float
  status           MilestoneStatus @default(PENDING)
  submittedAt      DateTime?
  approvedAt       DateTime?
  reviewDeadlineAt DateTime?
  evidence         EvidenceFile[]
  dispute          Dispute?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model EvidenceFile {
  id           String    @id @default(cuid())
  milestone    Milestone @relation(fields: [milestoneId], references: [id])
  milestoneId  String
  uploader     User      @relation(fields: [uploaderUserId], references: [id])
  uploaderUserId String
  url          String
  type         String
  createdAt    DateTime  @default(now())
}

model Dispute {
  id              String   @id @default(cuid())
  milestone       Milestone @relation(fields: [milestoneId], references: [id])
  milestoneId     String   @unique
  reasonText      String
  status          String
  resolutionNotes String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String
  payload   Json
  sentAt    DateTime @default(now())
  readAt    DateTime?
}

model AuditLog {
  id         String   @id @default(cuid())
  actor      User     @relation(fields: [actorUserId], references: [id])
  actorUserId String
  entity     String
  entityId   String
  action     String
  metadata   Json
  createdAt  DateTime @default(now())
}

model WebhookEvent {
  id         String   @id @default(cuid())
  source     String
  payload    Json
  processed  Boolean  @default(false)
  createdAt  DateTime @default(now())
}

model Review {
  id            String     @id @default(cuid())
  job           Job        @relation(fields: [jobId], references: [id])
  jobId         String
  contractor    Contractor @relation(fields: [contractorId], references: [id])
  contractorId  String
  homeowner     Homeowner  @relation(fields: [homeownerId], references: [id])
  homeownerId   String
  rating        Int
  comment       String?
  createdAt     DateTime   @default(now())

  @@unique([jobId, homeownerId])
  @@index([contractorId, createdAt], map: "review_contractor_created_idx")
}

model Message {
  id             String   @id @default(cuid())
  job            Job      @relation(fields: [jobId], references: [id])
  jobId          String
  sender         User     @relation("MessageSender", fields: [senderUserId], references: [id])
  senderUserId   String
  body           String
  attachments    Json?
  readByUserIds  String[] @default([])
  createdAt      DateTime @default(now())

  @@index([jobId, createdAt], map: "message_job_created_idx")
}

model Invite {
  id         String        @id @default(cuid())
  job        Job?          @relation(fields: [jobId], references: [id])
  jobId      String?
  role       InviteRole
  email      String
  phone      String?
  token      String        @unique
  status     InviteStatus  @default(PENDING)
  createdAt  DateTime      @default(now())
  expiresAt  DateTime

  @@index([email, status], map: "invite_email_status_idx")
  @@index([token], map: "invite_token_idx")
}

model Document {
  id         String         @id @default(cuid())
  user       User           @relation(fields: [userId], references: [id])
  userId     String
  type       DocumentType
  url        String
  status     DocumentStatus @default(PENDING)
  notes      String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@index([status], map: "document_status_idx")
}

enum Role {
  ADMIN
  CONTRACTOR
  HOMEOWNER
}

enum JobStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  DISPUTED
  FUNDING_REQUIRED
}

enum MilestoneStatus {
  PENDING
  FUNDED
  RELEASED
  REFUNDED
  DISPUTED
}

enum Trade {
  ROOFING
  MOVING
  SOLAR
  TREE_TRIMMING
  HOME_IMPROVEMENT
  OTHER
}

enum InviteRole {
  CONTRACTOR
  HOMEOWNER
}

enum InviteStatus {
  PENDING
  ACCEPTED
  EXPIRED
}

enum DocumentType {
  LICENSE
  INSURANCE
  OTHER
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
}
