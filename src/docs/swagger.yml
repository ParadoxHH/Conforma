openapi: 3.1.0
info:
  title: Conforma API
  version: 2.0.0
  description: API for Conforma, covering profiles, contractor discovery, invites, messaging, reviews, documents, and notifications.
servers:
  - url: http://localhost:3001/api
paths:
  /auth/register:
    post:
      summary: Register a new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201': { description: User created }
  /auth/login:
    post:
      summary: Authenticate a user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200': { description: JWT issued }
  /profiles/me:
    get:
      summary: Get the current profile
      tags: [Profiles]
      security:
        - bearerAuth: []
      responses:
        '200': { description: Current user profile }
    put:
      summary: Update the current profile
      tags: [Profiles]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ContractorProfileUpdate'
                - $ref: '#/components/schemas/HomeownerProfileUpdate'
      responses:
        '200': { description: Profile updated }
  /profiles/contractors/{id}:
    get:
      summary: Public contractor profile
      tags: [Profiles]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: Contractor profile }
  /profiles/contractors/{id}/reviews:
    get:
      summary: Contractor reviews
      tags: [Reviews]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
      responses:
        '200': { description: Paginated reviews }
  /search/contractors:
    get:
      summary: Search contractors
      tags: [Search]
      parameters:
        - in: query
          name: trade
          schema: { type: string }
        - in: query
          name: zip
          schema: { type: string, pattern: '^[0-9]{5}$' }
        - in: query
          name: radius
          schema: { type: number, minimum: 0 }
        - in: query
          name: verified
          schema: { type: boolean }
        - in: query
          name: minRating
          schema: { type: number, minimum: 0, maximum: 5 }
        - in: query
          name: q
          schema: { type: string }
        - in: query
          name: sort
          schema: { type: string, enum: [rating, distance, recency] }
        - in: query
          name: page
          schema: { type: integer, minimum: 1 }
        - in: query
          name: pageSize
          schema: { type: integer, minimum: 1, maximum: 100 }
      responses:
        '200': { description: Paginated contractor list }
  /invites:
    post:
      summary: Create an invite
      tags: [Invites]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInviteRequest'
      responses:
        '201': { description: Invite created }
  /invites/{token}:
    get:
      summary: Inspect an invite
      tags: [Invites]
      parameters:
        - in: path
          name: token
          required: true
          schema: { type: string }
      responses:
        '200': { description: Invite details }
  /invites/{token}/accept:
    post:
      summary: Accept an invite
      tags: [Invites]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/AcceptContractorInvite'
                - $ref: '#/components/schemas/AcceptHomeownerInvite'
      responses:
        '200': { description: Invite accepted }
  /jobs:
    post:
      summary: Create a job
      tags: [Jobs]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateJobRequest'
      responses:
        '201': { description: Job created }
    get:
      summary: List jobs for the current user
      tags: [Jobs]
      security:
        - bearerAuth: []
      responses:
        '200': { description: Job list }
  /jobs/{id}:
    get:
      summary: Job detail
      tags: [Jobs]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: Job detail }
  /jobs/{id}/messages:
    get:
      summary: List job messages
      tags: [Messages]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: Message list }
    post:
      summary: Post a job message
      tags: [Messages]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMessageRequest'
      responses:
        '201': { description: Message created }
  /jobs/{id}/messages/read:
    post:
      summary: Mark job messages as read
      tags: [Messages]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: Messages marked as read }
  /jobs/{id}/reviews:
    post:
      summary: Create a review for a completed job
      tags: [Reviews]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReviewRequest'
      responses:
        '201': { description: Review created }
  /documents/upload-url:
    post:
      summary: Generate a document upload URL
      tags: [Documents]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadUrlRequest'
      responses:
        '200': { description: Upload URL issued }
  /documents:
    get:
      summary: List my documents
      tags: [Documents]
      security:
        - bearerAuth: []
      responses:
        '200': { description: Document list }
    post:
      summary: Submit a document for review
      tags: [Documents]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDocumentRequest'
      responses:
        '201': { description: Document submitted }
  /admin/documents:
    get:
      summary: List documents for admin review
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: status
          schema: { type: string, enum: [PENDING, APPROVED, REJECTED] }
      responses:
        '200': { description: Admin document list }
  /admin/documents/{id}/approve:
    post:
      summary: Approve a document
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: Document approved }
  /admin/documents/{id}/reject:
    post:
      summary: Reject a document
      tags: [Admin]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RejectDocumentRequest'
      responses:
        '200': { description: Document rejected }
  /notifications:
    get:
      summary: List notifications
      tags: [Notifications]
      security:
        - bearerAuth: []
      responses:
        '200': { description: Notification list }
  /notifications/read:
    post:
      summary: Mark notifications as read
      tags: [Notifications]
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MarkNotificationsRead'
      responses:
        '200': { description: Notifications updated }
  /billing/plans:
    get:
      summary: List billing plans
      tags: [Billing]
      responses:
        ''200'':
          description: Available billing plans
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ''#/components/schemas/BillingPlan''
  /billing/subscribe:
    post:
      summary: Subscribe to a billing plan
      tags: [Billing]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [plan]
              properties:
                plan:
                  type: string
                  enum: [PRO, VERIFIED]
      responses:
        ''200'': { description: Subscription updated }
  /billing/me:
    get:
      summary: Get billing summary
      tags: [Billing]
      security:
        - bearerAuth: []
      responses:
        ''200'':
          description: Current billing summary
          content:
            application/json:
              schema:
                $ref: ''#/components/schemas/BillingSummary''
  /jobs/{id}/fees:
    get:
      summary: Get job fee breakdown
      tags: [Jobs]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        ''200'':
          description: Fee breakdown for the job
          content:
            application/json:
              schema:
                $ref: ''#/components/schemas/FeeBreakdown''
  /jobs/{id}/state:
    put:
      summary: Override job state configuration
      tags: [Jobs]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [stateCode]
              properties:
                stateCode:
                  type: string
                  minLength: 2
                  maxLength: 2
      responses:
        ''200'': { description: Job state updated }
  /payouts/me:
    get:
      summary: List payouts for the current contractor
      tags: [Payouts]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: status
          schema: { type: string, enum: [PENDING, SENT, SETTLED, FAILED] }
      responses:
        ''200'':
          description: Payout list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ''#/components/schemas/Payout''
  /payouts/{jobId}/instant:
    post:
      summary: Trigger an instant payout for a job
      tags: [Payouts]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: jobId
          required: true
          schema: { type: string }
      responses:
        ''201'': { description: Instant payout request accepted }
  /ai/disputes/{id}:
    get:
      summary: Retrieve AI dispute summary
      tags: [AI]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        ''200'':
          description: Latest AI triage summary
          content:
            application/json:
              schema:
                $ref: ''#/components/schemas/AiDisputeSummary''
  /ai/disputes/{id}/triage:
    post:
      summary: Generate AI triage for a dispute
      tags: [AI]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        ''201'': { description: AI triage created }
  /match/contractors:
    get:
      summary: Recommend contractors for a project
      tags: [Search]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: trade
          schema: { type: string }
        - in: query
          name: zip
          schema: { type: string }
        - in: query
          name: budget
          schema: { type: number }
      responses:
        ''200'':
          description: Matching contractors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ''#/components/schemas/MatchingContractor''
  /analytics/contractor:
    get:
      summary: Contractor analytics
      tags: [Analytics]
      security:
        - bearerAuth: []
      responses:
        ''200'':
          description: Contractor analytics summary
          content:
            application/json:
              schema:
                $ref: ''#/components/schemas/ContractorAnalytics''
  /analytics/homeowner:
    get:
      summary: Homeowner analytics
      tags: [Analytics]
      security:
        - bearerAuth: []
      responses:
        ''200'':
          description: Homeowner analytics summary
          content:
            application/json:
              schema:
                $ref: ''#/components/schemas/HomeownerAnalytics''
  /analytics/admin:
    get:
      summary: Platform analytics overview
      tags: [Analytics]
      security:
        - bearerAuth: []
      responses:
        ''200'':
          description: Platform analytics data
          content:
            application/json:
              schema:
                $ref: ''#/components/schemas/AdminAnalytics''
  /exports/accounting.csv:
    get:
      summary: Download accounting export CSV
      tags: [Exports]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: from
          schema: { type: string, format: date-time }
        - in: query
          name: to
          schema: { type: string, format: date-time }
      responses:
        ''200'': { description: CSV export stream }
  /config/states:
    get:
      summary: List state configuration rules
      tags: [Config]
      responses:
        ''200'':
          description: State configuration
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ''#/components/schemas/StateRule''
  /referrals/me:
    get:
      summary: Get referral summary for current user
      tags: [Referrals]
      security:
        - bearerAuth: []
      responses:
        ''200'':
          description: Referral profile
          content:
            application/json:
              schema:
                $ref: ''#/components/schemas/ReferralSummary''
  /referrals/redeem:
    post:
      summary: Redeem a referral code
      tags: [Referrals]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [code]
              properties:
                code: { type: string }
      responses:
        ''200'': { description: Code redeemed }
  /disputes/{id}:
    get:
      summary: Get dispute details
      tags: [Disputes]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        ''200'': { description: Dispute with milestone context }
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RegisterRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, format: password }
        role: { type: string, enum: [CONTRACTOR, HOMEOWNER] }
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, format: password }
    ContractorProfileUpdate:
      type: object
      properties:
        avatarUrl: { type: string, format: uri }
        bio: { type: string }
        companyName: { type: string }
        serviceAreas:
          type: array
          items: { type: string, pattern: '^[0-9]{5}$' }
    HomeownerProfileUpdate:
      type: object
      properties:
        avatarUrl: { type: string, format: uri }
        bio: { type: string }
        displayName: { type: string }
        allowAlias: { type: boolean }
    CreateInviteRequest:
      type: object
      required: [role, email]
      properties:
        role: { type: string, enum: [CONTRACTOR, HOMEOWNER] }
        email: { type: string, format: email }
        phone: { type: string }
        jobId: { type: string }
    AcceptContractorInvite:
      type: object
      required: [password, companyName, serviceAreas, trades]
      properties:
        password: { type: string, format: password }
        companyName: { type: string }
        serviceAreas:
          type: array
          items: { type: string, pattern: '^[0-9]{5}$' }
        trades:
          type: array
          items: { type: string }
    AcceptHomeownerInvite:
      type: object
      required: [password, address, city, state, zip]
      properties:
        password: { type: string, format: password }
        displayName: { type: string }
        address: { type: string }
        city: { type: string }
        state: { type: string, minLength: 2, maxLength: 2 }
        zip: { type: string, pattern: '^[0-9]{5}$' }
    CreateJobRequest:
      type: object
      required: [title, description, totalPrice, homeownerId, milestones]
      properties:
        title: { type: string }
        description: { type: string }
        totalPrice: { type: number }
        homeownerId: { type: string }
        milestones:
          type: array
          minItems: 1
          items:
            type: object
            required: [title, price]
            properties:
              title: { type: string }
              price: { type: number }
    CreateMessageRequest:
      type: object
      required: [body]
      properties:
        body: { type: string }
        attachments:
          type: array
          items:
            type: object
            properties:
              url: { type: string, format: uri }
              type: { type: string }
    CreateReviewRequest:
      type: object
      required: [rating]
      properties:
        rating: { type: integer, minimum: 1, maximum: 5 }
        comment: { type: string }
    UploadUrlRequest:
      type: object
      required: [type]
      properties:
        type: { type: string, enum: [LICENSE, INSURANCE, OTHER] }
    CreateDocumentRequest:
      type: object
      required: [type, fileUrl]
      properties:
        type: { type: string, enum: [LICENSE, INSURANCE, OTHER] }
        fileUrl: { type: string, format: uri }
    RejectDocumentRequest:
      type: object
      required: [notes]
      properties:
        notes: { type: string }
    MarkNotificationsRead:
      type: object
      properties:
        ids:
          type: array
          items: { type: string }

    BillingPlan:
      type: object
      properties:
        tier: { type: string, enum: [FREE, PRO, VERIFIED] }
        name: { type: string }
        priceMonthly: { type: number }
        badge: { type: string, nullable: true }
        description: { type: string }
        features:
          type: array
          items: { type: string }
        perks:
          type: array
          items: { type: string }
        instantPayoutIncluded: { type: boolean }
        highlight: { type: boolean }
    BillingSummary:
      type: object
      properties:
        tier: { type: string }
        status: { type: string }
        renewalAt: { type: string, format: date-time, nullable: true }
        instantPayoutEnabled: { type: boolean }
        instantPayoutEligible: { type: boolean }
        platformFeeBps: { type: integer }
        instantPayoutFeeBps: { type: integer }
        stripeCustomerPortalUrl: { type: string, format: uri, nullable: true }
        stripeSubscriptionId: { type: string, nullable: true }
    FeeBreakdown:
      type: object
      properties:
        platformFee: { type: number }
        escrowFees: { type: number }
        instantPayoutFee: { type: number }
        totalFees: { type: number }
        netPayout: { type: number }
        currency: { type: string }
    Payout:
      type: object
      properties:
        id: { type: string }
        jobId: { type: string }
        contractorId: { type: string }
        amount: { type: integer, description: 'Amount in cents' }
        type: { type: string, enum: [STANDARD, INSTANT] }
        status: { type: string, enum: [PENDING, SENT, SETTLED, FAILED] }
        processorRef: { type: string, nullable: true }
        createdAt: { type: string, format: date-time }
    AiDisputeSummary:
      type: object
      properties:
        summary: { type: string }
        suggestion: { type: string, enum: [PARTIAL_RELEASE, PARTIAL_REFUND, RESUBMIT, UNSURE] }
        confidence: { type: number, format: float, nullable: true }
        modelInfo: { type: object }
    MatchingContractor:
      type: object
      properties:
        contractorId: { type: string }
        score: { type: number }
        reasons:
          type: array
          items: { type: string }
        distanceMiles: { type: number, nullable: true }
        contractor:
          type: object
          properties:
            companyName: { type: string, nullable: true }
            ratingAvg: { type: number }
            ratingCount: { type: integer }
            subscriptionTier: { type: string }
            verified: { type: boolean }
            serviceAreas:
              type: array
              items: { type: string }
            instantPayoutEnabled: { type: boolean }
    ContractorAnalytics:
      type: object
      properties:
        jobsWonPercentage: { type: number }
        disputesRate: { type: number }
        averagePayoutDays: { type: number }
        revenueNetOfFees: { type: number }
        instantPayoutUsage: { type: number }
        totals:
          type: object
          properties:
            totalJobs: { type: integer }
            completedJobs: { type: integer }
            disputedJobs: { type: integer }
            payouts: { type: integer }
    HomeownerAnalytics:
      type: object
      properties:
        totalSpend: { type: number }
        averageCompletionDays: { type: number }
        approvalRate: { type: number }
        disputeRate: { type: number }
        totals:
          type: object
          properties:
            jobs: { type: integer }
            milestones: { type: integer }
            approvedMilestones: { type: integer }
            disputedMilestones: { type: integer }
    AdminAnalytics:
      type: object
      properties:
        mrr: { type: number }
        churnRate: { type: number }
        arpu: { type: number }
        feeRevenue: { type: number }
        instantPayoutRevenue: { type: number }
        disputeSlaHours: { type: number }
        totals:
          type: object
          properties:
            activeContractors: { type: integer }
            churnedContractors: { type: integer }
            jobs: { type: integer }
            disputes: { type: integer }
    StateRule:
      type: object
      properties:
        code: { type: string }
        name: { type: string }
        reviewWindows:
          type: object
          properties:
            midMilestoneDays: { type: integer }
            finalMilestoneDays: { type: integer }
        platformFeeCapBps: { type: integer, nullable: true }
        kycRequirement: { type: string }
    ReferralSummary:
      type: object
      properties:
        code: { type: string }
        referredByCode: { type: string, nullable: true }
        stats:
          type: object
          properties:
            signups: { type: integer }
            firstFundedJobs: { type: integer }
            credits: { type: integer }
